//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("SettingsModel", "FK_tables_0_0", "source", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rekod.Repository.SettingsDB.Source), "tables", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rekod.Repository.SettingsDB.Table), true)]
[assembly: EdmRelationshipAttribute("SettingsModel", "FK_filters_0_0", "Table", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Rekod.Repository.SettingsDB.Table), "filter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Rekod.Repository.SettingsDB.Filter), true)]

#endregion

namespace Rekod.Repository.SettingsDB
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class SettingsContext : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект SettingsContext, используя строку соединения из раздела "SettingsContext" файла конфигурации приложения.
        /// </summary>
        public SettingsContext() : base("name=SettingsContext", "SettingsContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SettingsContext.
        /// </summary>
        public SettingsContext(string connectionString) : base(connectionString, "SettingsContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SettingsContext.
        /// </summary>
        public SettingsContext(EntityConnection connection) : base(connection, "SettingsContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Source> Sources
        {
            get
            {
                if ((_Sources == null))
                {
                    _Sources = base.CreateObjectSet<Source>("Sources");
                }
                return _Sources;
            }
        }
        private ObjectSet<Source> _Sources;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Table> Tables
        {
            get
            {
                if ((_Tables == null))
                {
                    _Tables = base.CreateObjectSet<Table>("Tables");
                }
                return _Tables;
            }
        }
        private ObjectSet<Table> _Tables;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Spatial> Spatials
        {
            get
            {
                if ((_Spatials == null))
                {
                    _Spatials = base.CreateObjectSet<Spatial>("Spatials");
                }
                return _Spatials;
            }
        }
        private ObjectSet<Spatial> _Spatials;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<FilterElement> FilterElements
        {
            get
            {
                if ((_FilterElements == null))
                {
                    _FilterElements = base.CreateObjectSet<FilterElement>("FilterElements");
                }
                return _FilterElements;
            }
        }
        private ObjectSet<FilterElement> _FilterElements;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Filter> Filters
        {
            get
            {
                if ((_Filters == null))
                {
                    _Filters = base.CreateObjectSet<Filter>("Filters");
                }
                return _Filters;
            }
        }
        private ObjectSet<Filter> _Filters;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<geometry_columns> geometry_columns
        {
            get
            {
                if ((_geometry_columns == null))
                {
                    _geometry_columns = base.CreateObjectSet<geometry_columns>("geometry_columns");
                }
                return _geometry_columns;
            }
        }
        private ObjectSet<geometry_columns> _geometry_columns;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<locale> locales
        {
            get
            {
                if ((_locales == null))
                {
                    _locales = base.CreateObjectSet<locale>("locales");
                }
                return _locales;
            }
        }
        private ObjectSet<locale> _locales;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Sources. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSources(Source source)
        {
            base.AddObject("Sources", source);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Tables. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTables(Table table)
        {
            base.AddObject("Tables", table);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Spatials. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSpatials(Spatial spatial)
        {
            base.AddObject("Spatials", spatial);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet FilterElements. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFilterElements(FilterElement filterElement)
        {
            base.AddObject("FilterElements", filterElement);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Filters. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFilters(Filter filter)
        {
            base.AddObject("Filters", filter);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet geometry_columns. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTogeometry_columns(geometry_columns geometry_columns)
        {
            base.AddObject("geometry_columns", geometry_columns);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet locales. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTolocales(locale locale)
        {
            base.AddObject("locales", locale);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="Filter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Filter : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Filter.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="filterName">Исходное значение свойства FilterName.</param>
        /// <param name="whereText">Исходное значение свойства WhereText.</param>
        /// <param name="idTable">Исходное значение свойства IdTable.</param>
        public static Filter CreateFilter(global::System.Int64 id, global::System.String filterName, global::System.String whereText, global::System.Int64 idTable)
        {
            Filter filter = new Filter();
            filter.Id = id;
            filter.FilterName = filterName;
            filter.WhereText = whereText;
            filter.IdTable = idTable;
            return filter;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FilterName
        {
            get
            {
                return _FilterName;
            }
            set
            {
                OnFilterNameChanging(value);
                ReportPropertyChanging("FilterName");
                _FilterName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FilterName");
                OnFilterNameChanged();
            }
        }
        private global::System.String _FilterName;
        partial void OnFilterNameChanging(global::System.String value);
        partial void OnFilterNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String WhereText
        {
            get
            {
                return _WhereText;
            }
            set
            {
                OnWhereTextChanging(value);
                ReportPropertyChanging("WhereText");
                _WhereText = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("WhereText");
                OnWhereTextChanged();
            }
        }
        private global::System.String _WhereText;
        partial void OnWhereTextChanging(global::System.String value);
        partial void OnWhereTextChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 IdTable
        {
            get
            {
                return _IdTable;
            }
            set
            {
                OnIdTableChanging(value);
                ReportPropertyChanging("IdTable");
                _IdTable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IdTable");
                OnIdTableChanged();
            }
        }
        private global::System.Int64 _IdTable;
        partial void OnIdTableChanging(global::System.Int64 value);
        partial void OnIdTableChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SettingsModel", "FK_filters_0_0", "Table")]
        public Table Table
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Table>("SettingsModel.FK_filters_0_0", "Table").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Table>("SettingsModel.FK_filters_0_0", "Table").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Table> TableReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Table>("SettingsModel.FK_filters_0_0", "Table");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Table>("SettingsModel.FK_filters_0_0", "Table", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="FilterElement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FilterElement : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта FilterElement.
        /// </summary>
        /// <param name="fieldName">Исходное значение свойства FieldName.</param>
        /// <param name="typeOperator">Исходное значение свойства TypeOperator.</param>
        /// <param name="isReference">Исходное значение свойства IsReference.</param>
        /// <param name="elementCode">Исходное значение свойства ElementCode.</param>
        /// <param name="idFilter">Исходное значение свойства IdFilter.</param>
        public static FilterElement CreateFilterElement(global::System.String fieldName, global::System.Int32 typeOperator, global::System.Boolean isReference, global::System.String elementCode, global::System.Int32 idFilter)
        {
            FilterElement filterElement = new FilterElement();
            filterElement.FieldName = fieldName;
            filterElement.TypeOperator = typeOperator;
            filterElement.IsReference = isReference;
            filterElement.ElementCode = elementCode;
            filterElement.IdFilter = idFilter;
            return filterElement;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FieldName
        {
            get
            {
                return _FieldName;
            }
            set
            {
                if (_FieldName != value)
                {
                    OnFieldNameChanging(value);
                    ReportPropertyChanging("FieldName");
                    _FieldName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("FieldName");
                    OnFieldNameChanged();
                }
            }
        }
        private global::System.String _FieldName;
        partial void OnFieldNameChanging(global::System.String value);
        partial void OnFieldNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TypeOperator
        {
            get
            {
                return _TypeOperator;
            }
            set
            {
                if (_TypeOperator != value)
                {
                    OnTypeOperatorChanging(value);
                    ReportPropertyChanging("TypeOperator");
                    _TypeOperator = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeOperator");
                    OnTypeOperatorChanged();
                }
            }
        }
        private global::System.Int32 _TypeOperator;
        partial void OnTypeOperatorChanging(global::System.Int32 value);
        partial void OnTypeOperatorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueString
        {
            get
            {
                return _ValueString;
            }
            set
            {
                OnValueStringChanging(value);
                ReportPropertyChanging("ValueString");
                _ValueString = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueString");
                OnValueStringChanged();
            }
        }
        private global::System.String _ValueString;
        partial void OnValueStringChanging(global::System.String value);
        partial void OnValueStringChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsReference
        {
            get
            {
                return _IsReference;
            }
            set
            {
                if (_IsReference != value)
                {
                    OnIsReferenceChanging(value);
                    ReportPropertyChanging("IsReference");
                    _IsReference = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsReference");
                    OnIsReferenceChanged();
                }
            }
        }
        private global::System.Boolean _IsReference;
        partial void OnIsReferenceChanging(global::System.Boolean value);
        partial void OnIsReferenceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ElementCode
        {
            get
            {
                return _ElementCode;
            }
            set
            {
                if (_ElementCode != value)
                {
                    OnElementCodeChanging(value);
                    ReportPropertyChanging("ElementCode");
                    _ElementCode = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ElementCode");
                    OnElementCodeChanged();
                }
            }
        }
        private global::System.String _ElementCode;
        partial void OnElementCodeChanging(global::System.String value);
        partial void OnElementCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdFilter
        {
            get
            {
                return _IdFilter;
            }
            set
            {
                if (_IdFilter != value)
                {
                    OnIdFilterChanging(value);
                    ReportPropertyChanging("IdFilter");
                    _IdFilter = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdFilter");
                    OnIdFilterChanged();
                }
            }
        }
        private global::System.Int32 _IdFilter;
        partial void OnIdFilterChanging(global::System.Int32 value);
        partial void OnIdFilterChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="geometry_columns")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class geometry_columns : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта geometry_columns.
        /// </summary>
        /// <param name="f_table_name">Исходное значение свойства f_table_name.</param>
        /// <param name="f_geometry_column">Исходное значение свойства f_geometry_column.</param>
        /// <param name="type">Исходное значение свойства type.</param>
        /// <param name="coord_dimension">Исходное значение свойства coord_dimension.</param>
        /// <param name="spatial_index_enabled">Исходное значение свойства spatial_index_enabled.</param>
        public static geometry_columns Creategeometry_columns(global::System.String f_table_name, global::System.String f_geometry_column, global::System.String type, global::System.Int64 coord_dimension, global::System.Int64 spatial_index_enabled)
        {
            geometry_columns geometry_columns = new geometry_columns();
            geometry_columns.f_table_name = f_table_name;
            geometry_columns.f_geometry_column = f_geometry_column;
            geometry_columns.type = type;
            geometry_columns.coord_dimension = coord_dimension;
            geometry_columns.spatial_index_enabled = spatial_index_enabled;
            return geometry_columns;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String f_table_name
        {
            get
            {
                return _f_table_name;
            }
            set
            {
                if (_f_table_name != value)
                {
                    Onf_table_nameChanging(value);
                    ReportPropertyChanging("f_table_name");
                    _f_table_name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("f_table_name");
                    Onf_table_nameChanged();
                }
            }
        }
        private global::System.String _f_table_name;
        partial void Onf_table_nameChanging(global::System.String value);
        partial void Onf_table_nameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String f_geometry_column
        {
            get
            {
                return _f_geometry_column;
            }
            set
            {
                if (_f_geometry_column != value)
                {
                    Onf_geometry_columnChanging(value);
                    ReportPropertyChanging("f_geometry_column");
                    _f_geometry_column = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("f_geometry_column");
                    Onf_geometry_columnChanged();
                }
            }
        }
        private global::System.String _f_geometry_column;
        partial void Onf_geometry_columnChanging(global::System.String value);
        partial void Onf_geometry_columnChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String type
        {
            get
            {
                return _type;
            }
            set
            {
                if (_type != value)
                {
                    OntypeChanging(value);
                    ReportPropertyChanging("type");
                    _type = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("type");
                    OntypeChanged();
                }
            }
        }
        private global::System.String _type;
        partial void OntypeChanging(global::System.String value);
        partial void OntypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 coord_dimension
        {
            get
            {
                return _coord_dimension;
            }
            set
            {
                if (_coord_dimension != value)
                {
                    Oncoord_dimensionChanging(value);
                    ReportPropertyChanging("coord_dimension");
                    _coord_dimension = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("coord_dimension");
                    Oncoord_dimensionChanged();
                }
            }
        }
        private global::System.Int64 _coord_dimension;
        partial void Oncoord_dimensionChanging(global::System.Int64 value);
        partial void Oncoord_dimensionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> srid
        {
            get
            {
                return _srid;
            }
            set
            {
                OnsridChanging(value);
                ReportPropertyChanging("srid");
                _srid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("srid");
                OnsridChanged();
            }
        }
        private Nullable<global::System.Int64> _srid;
        partial void OnsridChanging(Nullable<global::System.Int64> value);
        partial void OnsridChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 spatial_index_enabled
        {
            get
            {
                return _spatial_index_enabled;
            }
            set
            {
                if (_spatial_index_enabled != value)
                {
                    Onspatial_index_enabledChanging(value);
                    ReportPropertyChanging("spatial_index_enabled");
                    _spatial_index_enabled = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("spatial_index_enabled");
                    Onspatial_index_enabledChanged();
                }
            }
        }
        private global::System.Int64 _spatial_index_enabled;
        partial void Onspatial_index_enabledChanging(global::System.Int64 value);
        partial void Onspatial_index_enabledChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="locale")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class locale : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта locale.
        /// </summary>
        /// <param name="locale1">Исходное значение свойства locale1.</param>
        /// <param name="description">Исходное значение свойства description.</param>
        public static locale Createlocale(global::System.String locale1, global::System.String description)
        {
            locale locale = new locale();
            locale.locale1 = locale1;
            locale.description = description;
            return locale;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String locale1
        {
            get
            {
                return _locale1;
            }
            set
            {
                if (_locale1 != value)
                {
                    Onlocale1Changing(value);
                    ReportPropertyChanging("locale1");
                    _locale1 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("locale1");
                    Onlocale1Changed();
                }
            }
        }
        private global::System.String _locale1;
        partial void Onlocale1Changing(global::System.String value);
        partial void Onlocale1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                if (_description != value)
                {
                    OndescriptionChanging(value);
                    ReportPropertyChanging("description");
                    _description = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("description");
                    OndescriptionChanged();
                }
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> iscurrent
        {
            get
            {
                return _iscurrent;
            }
            set
            {
                OniscurrentChanging(value);
                ReportPropertyChanging("iscurrent");
                _iscurrent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("iscurrent");
                OniscurrentChanged();
            }
        }
        private Nullable<global::System.Boolean> _iscurrent;
        partial void OniscurrentChanging(Nullable<global::System.Boolean> value);
        partial void OniscurrentChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="Source")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Source : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Source.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="sourceName">Исходное значение свойства SourceName.</param>
        public static Source CreateSource(global::System.Int64 id, global::System.String sourceName)
        {
            Source source = new Source();
            source.Id = id;
            source.SourceName = sourceName;
            return source;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceName
        {
            get
            {
                return _SourceName;
            }
            set
            {
                OnSourceNameChanging(value);
                ReportPropertyChanging("SourceName");
                _SourceName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SourceName");
                OnSourceNameChanged();
            }
        }
        private global::System.String _SourceName;
        partial void OnSourceNameChanging(global::System.String value);
        partial void OnSourceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SourceType
        {
            get
            {
                return _SourceType;
            }
            set
            {
                OnSourceTypeChanging(value);
                ReportPropertyChanging("SourceType");
                _SourceType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SourceType");
                OnSourceTypeChanged();
            }
        }
        private global::System.String _SourceType;
        partial void OnSourceTypeChanging(global::System.String value);
        partial void OnSourceTypeChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SettingsModel", "FK_tables_0_0", "tables")]
        public EntityCollection<Table> Tables
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Table>("SettingsModel.FK_tables_0_0", "tables");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Table>("SettingsModel.FK_tables_0_0", "tables", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="Spatial")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Spatial : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Spatial.
        /// </summary>
        /// <param name="srid">Исходное значение свойства Srid.</param>
        /// <param name="authName">Исходное значение свойства AuthName.</param>
        /// <param name="authSrid">Исходное значение свойства AuthSrid.</param>
        /// <param name="projText">Исходное значение свойства ProjText.</param>
        public static Spatial CreateSpatial(global::System.Int64 srid, global::System.String authName, global::System.Int64 authSrid, global::System.String projText)
        {
            Spatial spatial = new Spatial();
            spatial.Srid = srid;
            spatial.AuthName = authName;
            spatial.AuthSrid = authSrid;
            spatial.ProjText = projText;
            return spatial;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Srid
        {
            get
            {
                return _Srid;
            }
            set
            {
                if (_Srid != value)
                {
                    OnSridChanging(value);
                    ReportPropertyChanging("Srid");
                    _Srid = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Srid");
                    OnSridChanged();
                }
            }
        }
        private global::System.Int64 _Srid;
        partial void OnSridChanging(global::System.Int64 value);
        partial void OnSridChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AuthName
        {
            get
            {
                return _AuthName;
            }
            set
            {
                OnAuthNameChanging(value);
                ReportPropertyChanging("AuthName");
                _AuthName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AuthName");
                OnAuthNameChanged();
            }
        }
        private global::System.String _AuthName;
        partial void OnAuthNameChanging(global::System.String value);
        partial void OnAuthNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AuthSrid
        {
            get
            {
                return _AuthSrid;
            }
            set
            {
                OnAuthSridChanging(value);
                ReportPropertyChanging("AuthSrid");
                _AuthSrid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AuthSrid");
                OnAuthSridChanged();
            }
        }
        private global::System.Int64 _AuthSrid;
        partial void OnAuthSridChanging(global::System.Int64 value);
        partial void OnAuthSridChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RefSysName
        {
            get
            {
                return _RefSysName;
            }
            set
            {
                OnRefSysNameChanging(value);
                ReportPropertyChanging("RefSysName");
                _RefSysName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RefSysName");
                OnRefSysNameChanged();
            }
        }
        private global::System.String _RefSysName;
        partial void OnRefSysNameChanging(global::System.String value);
        partial void OnRefSysNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ProjText
        {
            get
            {
                return _ProjText;
            }
            set
            {
                OnProjTextChanging(value);
                ReportPropertyChanging("ProjText");
                _ProjText = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ProjText");
                OnProjTextChanged();
            }
        }
        private global::System.String _ProjText;
        partial void OnProjTextChanging(global::System.String value);
        partial void OnProjTextChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> SysProj
        {
            get
            {
                return _SysProj;
            }
            set
            {
                OnSysProjChanging(value);
                ReportPropertyChanging("SysProj");
                _SysProj = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SysProj");
                OnSysProjChanged();
            }
        }
        private Nullable<global::System.Boolean> _SysProj;
        partial void OnSysProjChanging(Nullable<global::System.Boolean> value);
        partial void OnSysProjChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SettingsModel", Name="Table")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Table : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Table.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="tableName">Исходное значение свойства TableName.</param>
        /// <param name="sourceId">Исходное значение свойства SourceId.</param>
        public static Table CreateTable(global::System.Int64 id, global::System.String tableName, global::System.Int64 sourceId)
        {
            Table table = new Table();
            table.Id = id;
            table.TableName = tableName;
            table.SourceId = sourceId;
            return table;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TableName
        {
            get
            {
                return _TableName;
            }
            set
            {
                OnTableNameChanging(value);
                ReportPropertyChanging("TableName");
                _TableName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TableName");
                OnTableNameChanged();
            }
        }
        private global::System.String _TableName;
        partial void OnTableNameChanging(global::System.String value);
        partial void OnTableNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 SourceId
        {
            get
            {
                return _SourceId;
            }
            set
            {
                OnSourceIdChanging(value);
                ReportPropertyChanging("SourceId");
                _SourceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceId");
                OnSourceIdChanged();
            }
        }
        private global::System.Int64 _SourceId;
        partial void OnSourceIdChanging(global::System.Int64 value);
        partial void OnSourceIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SettingsModel", "FK_tables_0_0", "source")]
        public Source Source
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Source>("SettingsModel.FK_tables_0_0", "source").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Source>("SettingsModel.FK_tables_0_0", "source").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Source> SourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Source>("SettingsModel.FK_tables_0_0", "source");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Source>("SettingsModel.FK_tables_0_0", "source", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SettingsModel", "FK_filters_0_0", "filter")]
        public EntityCollection<Filter> filters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Filter>("SettingsModel.FK_filters_0_0", "filter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Filter>("SettingsModel.FK_filters_0_0", "filter", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
