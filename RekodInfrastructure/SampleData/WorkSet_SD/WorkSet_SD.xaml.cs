//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.WorkSet_SD
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class WorkSet_SD { }
#else

	public class WorkSet_SD : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public WorkSet_SD()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/rekod_infrastructure;component/SampleData/WorkSet_SD/WorkSet_SD.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private WorkSetsMy _WorkSetsMy = new WorkSetsMy();

		public WorkSetsMy WorkSetsMy
		{
			get
			{
				return this._WorkSetsMy;
			}
		}

		private CurrentSet _CurrentSet = new CurrentSet();

		public CurrentSet CurrentSet
		{
			get
			{
				return this._CurrentSet;
			}

			set
			{
				if (this._CurrentSet != value)
				{
					this._CurrentSet = value;
					this.OnPropertyChanged("CurrentSet");
				}
			}
		}

		private WorkSetsOther _WorkSetsOther = new WorkSetsOther();

		public WorkSetsOther WorkSetsOther
		{
			get
			{
				return this._WorkSetsOther;
			}
		}

		private MessStatus _MessStatus = new MessStatus();

		public MessStatus MessStatus
		{
			get
			{
				return this._MessStatus;
			}

			set
			{
				if (this._MessStatus != value)
				{
					this._MessStatus = value;
					this.OnPropertyChanged("MessStatus");
				}
			}
		}

		private string _FilterText = string.Empty;

		public string FilterText
		{
			get
			{
				return this._FilterText;
			}

			set
			{
				if (this._FilterText != value)
				{
					this._FilterText = value;
					this.OnPropertyChanged("FilterText");
				}
			}
		}

		private bool _IsEdit = false;

		public bool IsEdit
		{
			get
			{
				return this._IsEdit;
			}

			set
			{
				if (this._IsEdit != value)
				{
					this._IsEdit = value;
					this.OnPropertyChanged("IsEdit");
				}
			}
		}
	}

	public class WorkSetsMy : System.Collections.ObjectModel.ObservableCollection<WorkSetsMyItem>
	{ 
	}

	public class WorkSetsMyItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _IsMy = false;

		public bool IsMy
		{
			get
			{
				return this._IsMy;
			}

			set
			{
				if (this._IsMy != value)
				{
					this._IsMy = value;
					this.OnPropertyChanged("IsMy");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _ShowSet = false;

		public bool ShowSet
		{
			get
			{
				return this._ShowSet;
			}

			set
			{
				if (this._ShowSet != value)
				{
					this._ShowSet = value;
					this.OnPropertyChanged("ShowSet");
				}
			}
		}

		private bool _IsNew = false;

		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}

			set
			{
				if (this._IsNew != value)
				{
					this._IsNew = value;
					this.OnPropertyChanged("IsNew");
				}
			}
		}

		private bool _IsAccess = false;

		public bool IsAccess
		{
			get
			{
				return this._IsAccess;
			}

			set
			{
				if (this._IsAccess != value)
				{
					this._IsAccess = value;
					this.OnPropertyChanged("IsAccess");
				}
			}
		}
	}

	public class CurrentSet : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private bool _IsMy = false;

		public bool IsMy
		{
			get
			{
				return this._IsMy;
			}

			set
			{
				if (this._IsMy != value)
				{
					this._IsMy = value;
					this.OnPropertyChanged("IsMy");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _ShowSet = false;

		public bool ShowSet
		{
			get
			{
				return this._ShowSet;
			}

			set
			{
				if (this._ShowSet != value)
				{
					this._ShowSet = value;
					this.OnPropertyChanged("ShowSet");
				}
			}
		}

		private bool _IsNew = false;

		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}

			set
			{
				if (this._IsNew != value)
				{
					this._IsNew = value;
					this.OnPropertyChanged("IsNew");
				}
			}
		}
	}

	public class WorkSetsOther : System.Collections.ObjectModel.ObservableCollection<WorkSetsOtherItem>
	{ 
	}

	public class WorkSetsOtherItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private bool _IsMy = false;

		public bool IsMy
		{
			get
			{
				return this._IsMy;
			}

			set
			{
				if (this._IsMy != value)
				{
					this._IsMy = value;
					this.OnPropertyChanged("IsMy");
				}
			}
		}

		private bool _IsNew = false;

		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}

			set
			{
				if (this._IsNew != value)
				{
					this._IsNew = value;
					this.OnPropertyChanged("IsNew");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _ShowSet = false;

		public bool ShowSet
		{
			get
			{
				return this._ShowSet;
			}

			set
			{
				if (this._ShowSet != value)
				{
					this._ShowSet = value;
					this.OnPropertyChanged("ShowSet");
				}
			}
		}

		private bool _IsAccess = false;

		public bool IsAccess
		{
			get
			{
				return this._IsAccess;
			}

			set
			{
				if (this._IsAccess != value)
				{
					this._IsAccess = value;
					this.OnPropertyChanged("IsAccess");
				}
			}
		}
	}

	public class MessStatus : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Text = string.Empty;

		public string Text
		{
			get
			{
				return this._Text;
			}

			set
			{
				if (this._Text != value)
				{
					this._Text = value;
					this.OnPropertyChanged("Text");
				}
			}
		}

		private string _Status = string.Empty;

		public string Status
		{
			get
			{
				return this._Status;
			}

			set
			{
				if (this._Status != value)
				{
					this._Status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}
	}
#endif
}